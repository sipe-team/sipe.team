const { GoogleSpreadsheet } = require("google-spreadsheet");
const fs = require("fs");
require('dotenv').config()

function isEmpty(data) {
    return data === '' || data.length === 0
}

function getGoogleSheet() {
    // Initialize the sheet - doc ID is the long id in the sheets URL

    const sheetId = process.env.SHEET_ID;
    const email = process.env.EMAIL;
    const key = process.env.KEY;

    const doc = new GoogleSpreadsheet(sheetId);

    try {
        ( async () => {
            try {
                await doc.useServiceAccountAuth({
                    // env var values are copied from service account credentials generated by google
                    // see "Authentication" section in docs for more info
                    client_email:  email,
                    private_key: key,
                });
                await doc.loadInfo()
                const config = doc.sheetsByTitle['Config'];
                const peoples = doc.sheetsByTitle['People']; // or use doc.sheetsById[id] or doc.sheetsByTitle[title]
                const activities = doc.sheetsByTitle['Activity'];
                const aboutActivity = doc.sheetsByTitle['About-Activity']
                const aboutSponsor = doc.sheetsByTitle['About-Sponsor']

                const peoplesRow = await peoples.getRows();
                const activitiesRow = await activities.getRows();
                const aboutActivityRow = await aboutActivity.getRows();
                const aboutSponsorRow = await aboutSponsor.getRows()

                const configRow = await config.getRows();

                const driveData = configRow.find(it => it._rowNumber === 3)['_rawData'];
                const periods = configRow.find(it => it._rowNumber === 2)['_rawData'].slice(1);
                const activitiesType = configRow.find(it => it._rowNumber === 4)['_rawData'].slice(1)
                const imageBaseUrl = driveData[1].trim();

                const periodsMap = {}
                periods.forEach(period => {
                    periodsMap[period] = []
                })

                peoplesRow.forEach(it => {
                    const row = it['_rawData'];
                    const key = row[0];
                    const period = row[1];
                    const isOrganizer = row[2] === 'TRUE';
                    const thumbnail = isEmpty(row[3]) ? '' : imageBaseUrl + row[3];
                    const name = row[4];
                    const part = row[5];
                    const introduce = row[6];
                    const review = row[7];
                    const github = row[8];
                    const linkedin = row[9];
                    const etc = row[10];
                    periodsMap[period].push({
                        id: key,
                        period: period,
                        isOrganizer: isOrganizer,
                        thumbnail: thumbnail,
                        name: name,
                        part: part,
                        introduce: introduce,
                        review: review,
                        github: github,
                        linkedin: linkedin,
                        etc: etc,
                    })
                })

                const activityMap = {}
                activitiesType.forEach((activity) => {
                    activityMap[activity] = []
                })

                activitiesRow.forEach(it => {
                    const row = it['_rawData'];
                    const key = row[0];
                    const type = row[1];
                    const thumbnail = row[2];
                    const title = row[3];
                    const description = row[4];
                    const name = row[5];
                    const date = row[6];
                    const link = row[7];

                    activityMap[type].push({
                        id: key,
                        type: type || 'B',
                        thumbnail: thumbnail || '',
                        title: title || '',
                        description: description || '',
                        name: name || '',
                        date: date || '',
                        link: link || '',
                    })
                });

                const aboutMap = {
                    activity: {},
                    sponsor: {}
                }

                aboutActivityRow.forEach(it => {
                    const row = it['_rawData']
                    const key = row[0];
                    const name = row[1];
                    const activities = row[2]?.split(',') || []
                    aboutMap.activity[key] = {
                        key,
                        name,
                        activities
                    }
                })

                aboutSponsorRow.forEach(it => {
                    const row = it['_rawData']
                    const key = row[0];
                    const name = row[1] || '';
                    const link = row[2] || '';
                    aboutMap.sponsor[key] = {
                        key,
                        name,
                        link
                    }
                })


                const json = {
                    peoples: periodsMap,
                    activities: activityMap,
                    abouts: aboutMap
                }

                fs.writeFile('src/db/index.json', JSON.stringify(json), { flag: 'w+' }, function (err) {
                    if (err) return console.error(err);
                });

            } catch (e) {
                console.error(e);
            }
        })();
    } catch(e) {
        console.error(e)
    }

    // Initialize Auth - see https://theoephraim.github.io/node-google-spreadsheet/#/getting-started/authentication

}

getGoogleSheet();